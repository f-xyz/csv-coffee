// Generated by CoffeeScript 1.7.1
(function() {
  var csv, should;

  should = require('chai').should();

  csv = require('../csv')();

  describe('parseCsv() tests', function() {
    return it('should return all parsed data', function() {
      var expected, result;
      expected = [['q', 'w', 'e'], ['a', 's', 'd']];
      result = csv.parseCsv('q,w,e\na,s,d');
      return result.should.deep.equal(expected);
    });
  });

  describe('parseLine() tests', function() {
    return it('should return all fields', function() {
      return csv.parseLine('q,",w",e').should.deep.equal(['q', ',w', 'e']);
    });
  });

  describe('getNextLine() tests', function() {
    it('should return NULL for empty input', function() {
      return should.not.exist(csv.getNextLine('', 0));
    });
    it('should return first line', function() {
      return csv.getNextLine('qwe\r\nasd', 0).result.should.equal('qwe');
    });
    it('should return offset after found line', function() {
      return csv.getNextLine('qwe\r\nasd', 0).pos.should.equal(5);
    });
    it('should return next line from offset', function() {
      return csv.getNextLine('qwe\r\nasd\r\n', 5).result.should.equal('asd');
    });
    return it('should return NULL after end of line', function() {
      return should.not.exist(csv.getNextLine('qwe\rn', 500));
    });
  });

  describe('getNextField() tests', function() {
    it('should return NULL for empty input', function() {
      return should.not.exist(csv.getNextField('', 0));
    });
    it('should return first field', function() {
      return csv.getNextField('qwe,asd', 0).result.should.equal('qwe');
    });
    it('should return offset after found field', function() {
      return csv.getNextField('qwe,asd', 0).pos.should.equal(4);
    });
    it('should return next field from offset', function() {
      return csv.getNextField('qwe,asd', 4).result.should.equal('asd');
    });
    it('should respect brackets', function() {
      return csv.getNextField('"q,w,e,","asd"', 0).result.should.equal('q,w,e,');
    });
    it('should respect brackets with offset', function() {
      return csv.getNextField('"q,w,e,","asd"', 9).result.should.equal('asd');
    });
    it('should respect escaped (double) brackets', function() {
      return csv.getNextField('"q""we"', 0).result.should.equal('q"we');
    });
    return it('should return NULL after end of line', function() {
      return should.not.exist(csv.getNextField('qwe', 500));
    });
  });

  describe('setting options', function() {
    var tsv;
    tsv = require('../csv')({
      fieldSeparator: '\t',
      lineSeparators: ['\0'],
      quote: '`'
    });
    return it('should parse TSV', function() {
      var expected, result;
      expected = [['q', 'w', 'e'], ['a', 's', 'd']];
      result = tsv.parseCsv('q\t`w`\te\0a\ts\td');
      return result.should.deep.equal(expected);
    });
  });

}).call(this);
